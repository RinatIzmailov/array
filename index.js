// Массивы это объекты с цифровыми именами свойств
// Пример создания массива:

const myArray = [1, 2, 3]
    console.log(myArray)

// В массиве можно сохранять разнве значения (строки,цифры и т.д.)

const myArray1 = [1, true, 'Rinat']
    console.log(myArray1)

// Свойство length паказывает длинну массива

console.log(myArray1.length)

// Если создать второй массив с такими же данными то они не будут равны так как занимают разную часть в памяти

const myArray2 = [1, true, 'Rinat']

myArray1 === myArray2   // Будет false в результате

// Если прировнять один массив к другому то при сравнении будет true

const myArray3 = myArray   // Объект скопирован по ссылке

myArray === myArray3

                            // Чтение значений массива

const myArray4 = [1, true, 'Rinat']
    console.log(myArray4)

// Если свойства у объекта цифровые (а в массиве так и есть, с 0 по длинне массива) то НЕЛЬЗЯ использовать точечную запись

console.log(myArray4[0])
console.log(myArray4[2])

// Чтобы получить длинну массива используем "length"

console.log(myArray4.length)

// Можно менять значение элемента внутри массива:

// Имеется массив

const myArray5 = [1, 2, 3]
    console.log(myArray5)
    console.log(myArray5.length)

// Указав после названия массива номер элемента и присвоить ему новое значение

myArray5[2] = 'QWERTY' 
    console.log(myArray5) // на выходе будет [1, 2, 'QWERTY]

// Можем добавлять новый элемент в конец массива

myArray5[3] = 'true' 
    console.log(myArray5) // на выходе будет [ 1, 2, 'QWERTY', 'true' ]


                            // Методы массивов (функции высщего порядка или методы прототипа) 
                            // Их можно вызывать используя точечную запись после названия переменой которая содержит массив

myArray5.length

// PUSH  (Используется для добавления элемента в конец массива)

const myArray6 = [1, 2, 3]   //  [1, 2, 3]

myArray6.push|(4)

    console.log(myArray6) //  [1, 2, 3, 4]

// POP  (Используется для удаления элемента с конеца массива)

const myArray7 = [1, 2, 3]   //  [1, 2, 3]

myArray7.pop()

    console.log(myArray6) //  [1, 2]

// PUSH  (Используется для добавления элемента в начало массива)

myArray7.unshif()  // Изменятся индексы элементов


                            //  FOREACH
// Создается новый массив

const myArray8 = [1, 2, 3, 4]

// Вызываем метод forEachю. Ему передаем стрелочную функцию

myArray8.forEach(el => console.log(el*2))

// Мне удобнее (пока) когда функиональное выражение написанно "классически"

let arr = [1, 2, 3, 4, 5];

arr.forEach(function(elem) {
	console.log(elem);
});

                        // MAP

//Метод map позволяет применить заданную функцию для каждого элемента массива. 

//При этом метод не изменяет исходный массив, а возвращает измененный.

//Метод в параметре получает функцию, которая выполнится для каждого элемента
//массива. То, что вернет эта функция через return для элемента массива, станет
//новым значением этого элемента

const arr1 = [1, 2, 3, 4, 5]

const newArr = arr1.map(el =>el*4)

    console.log(newArr)

const arr2 = [1, 2, 3, 4, 5]

const newArr1 = arr2.map(function(el) {
    return arr[2]*2
})
    console.log(newArr1)
